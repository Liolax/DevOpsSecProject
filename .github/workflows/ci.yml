name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Audit Dependencies
      - name: Audit Dependencies
        run: |
          npm install
          npm audit --audit-level=moderate

      # Step 3: Cache Frontend Node Modules
      - name: Cache Frontend Node Modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Debug: Check the frontend directory
      - name: Debug Frontend Directory
        run: |
          ls -al frontend/
          cat frontend/package.json

      # Step 5: Build the Frontend Image
      - name: Build Frontend Image
        run: |
          docker build -t liolax/my-devopssec-ca-app:frontend-${{ env.IMAGE_TAG }} -f frontend/Dockerfile ./frontend

      # Step 6: Build the Backend Image
      - name: Build Backend Image
        run: |
          docker build -t liolax/my-devopssec-ca-app:backend-${{ env.IMAGE_TAG }} -f backend/Dockerfile ./backend

      # Step 7: Log in to Docker Hub using secrets
      - name: Docker Login
        run: |
          echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Step 8: Push the Frontend Image to Docker Hub
      - name: Push Frontend Image
        run: |
          docker push liolax/my-devopssec-ca-app:frontend-${{ env.IMAGE_TAG }}

      # Step 9: Push the Backend Image to Docker Hub
      - name: Push Backend Image
        run: |
          docker push liolax/my-devopssec-ca-app:backend-${{ env.IMAGE_TAG }}
